# -*- coding: utf-8 -*-
"""KOBE

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jw6zf3mfKbg2T9Z6KL22T5idWGwzzZNI
"""

!pip install prophet

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from prophet import Prophet
import numpy as np
import time

"""a) Conte quantos arremessos foram convertidos (shot_made_flag)

Lendo o arquivo csv com pandas
"""

kobe = pd.read_csv('/content/kobe_bryant_shots_data.csv');

"""Exibindo os 5 primeiros resultados.

A função head(): retorna os 5 primeiros objetos baseados na posição.

Caso queira exibir mais valores é só passar um numero específico dentro da função.
"""

kobe.head()

kobe.head(7)

"""**dropna()**: apaga valores vazios da coluna ou linha.

**kobe['shot_made_flag'].dropna()** : se utulizar desse jeito voce especifica qual coluna voce deseja do dataset voce deseja eliminar os campos vazios.


"""

kobe['shot_made_flag'].dropna()

kobe_acertos = kobe[kobe['shot_made_flag'] == 1]
acertos = kobe_acertos['shot_made_flag'].count()
print("Arremessos convertidos:" ,acertos)

"""b) Calcule qual foi a taxa de sucesso (eficiência) para todos os arremessos (total de
arremessos convertidos/ total de arremessos feitos)

"""

print("Arremessos convertidos:" ,acertos)
kobe_erro = kobe[kobe['shot_made_flag'] == 0]
erro = kobe_erro['shot_made_flag'].count()
print("Arremessos não convertidos:" ,erro)
total = kobe['shot_made_flag'].count()
print("Total de arremessos:" ,total)
eficiencia = acertos / total * 100
print("Eficiencia:" ,eficiencia.round(2))

"""c) Qual foi o arremesso convertido mais distante?

kobe_acertos['shot_distance'].max(): retorna o maior valor da coluna passada como paramentro.
"""

acertoMaisDistente = kobe_acertos['shot_distance'].max()
print("Arremesso mais distante:" ,acertoMaisDistente)

"""d) Qual o quarto do jogo que o Kobe Bryant é mais eficiente?

"""

quarterbeste = kobe_acertos.groupby('period')['shot_made_flag'].agg(["count"])
print("O quarto do jogo que o Kobe Bryant é mais eficiente:" ,"3Q")
quarterbeste

"""A grupei a coluna pela coluca de period e depois someis os valores da shot_made_flag

e) Agrupe pelo tipo de arremesso e descubra qual tipo de arremesso que o Kobe Bryant é mais
eficiente.
"""

bestShotType = kobe_acertos.groupby('combined_shot_type')['shot_made_flag'].agg(["count"])
print("Tipo de arremesso que o Kobe Bryant é mais eficiente:" ,'Jump Shot')
bestShotType

"""f) Qual foi a melhor temporada do Kobe Bryant em relação a percentual de cestas convertidas?"""

bestTemp = kobe_acertos.groupby('season')['shot_made_flag'].agg(["count"])
best = bestTemp.sort_values(by='count', ascending=False).head(1)
print("A melhor temporada do Kobe Bryant em relação a percentual de cestas convertidas:",best)
eficiencia = best.max() / total * 100
print("Eficiencia:" ,eficiencia)

"""g) Conte o tipo de arremesso por temporada"""

shotTempType = kobe.groupby(['season','shot_type'])['shot_type'].count();
shotTempType

"""f) Faça dois gráficos: posição em quadra dos arremessos perdidos x posição em quadra dos
arremessos acertados (o eixo X é a largura da quadra, e o Y é a distânca para o fundo de
quadra).
"""

fig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12,7))
ax1.set_ylim(800, -50)

sns.regplot(x='loc_x', y='loc_y', data=kobe_erro, fit_reg=False, ax=ax1, color='r',marker='.',scatter_kws={'s':2})
sns.regplot(x='loc_x', y='loc_y', data=kobe_acertos, fit_reg=False, ax=ax2, color='g',marker='.',scatter_kws={'s':2})

"""Qual a distância média dos arremessos convertidos? Qual a distância média dos arremessos
não-convertidos?
"""

kobe_acerto_mean = kobe_acertos['shot_distance'].mean()
kobe_erro_mean = kobe_erro['shot_distance'].mean()
print("A distância média dos arremessos convertidos:", kobe_acerto_mean.round(2))
print("A distância média dos arremessos não-convertidos:" ,kobe_erro_mean.round(2))